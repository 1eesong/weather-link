name: CI/CD Pipeline

on:
  push:
    # branches: [ main ]   # main 브랜치에 push될 때 실행
    branches: [ dev ]   # dev 브랜치에 push될 때 실행

jobs:
  build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}     # github Repository Actions에 등록해놔야함
          password: ${{ secrets.DOCKERHUB_PASSWORD }}     # github Repository Actions에 등록해놔야함

      - name: Build and Push Docker Image
        run: |
          docker build -t hoyaa/weather_link:latest -f team01-back/Dockerfile.
          docker push hoyaa/weather_link:latest
  deploy:
    needs: build-push  # build-push 작업 완료 후 실행
    runs-on: ubuntu-latest
    steps:
      - name: SSH Blue-Green Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            cd /home/weatherlink0409/backend
            # 1. 현재 색상 확인
            CURRENT_COLOR=$(docker ps --filter "name=_app-nestjs-app" --format "{{.Names}}" | grep -oE 'blue|green' | head -n1 || echo "blue")
            NEW_COLOR=$([[ "$CURRENT_COLOR" == "blue" ]] && echo "green" || echo "blue")

            # 2. 새 컨테이너 실행
            docker compose -p ${NEW_COLOR}_app up -d --build --no-deps nestjs-app

            # 3. 헬스체크 대기 (최대 60초)
            if ! timeout 60 bash -c 'until docker inspect --format "{{.State.Health.Status}}" ${NEW_COLOR}_app-nestjs-app-1 | grep healthy; do sleep 2; done'; then
              echo "::error::Health check failed for ${NEW_COLOR} environment"
              docker compose -p ${NEW_COLOR}_app logs nestjs-app
              exit 1
            fi

            # 4. Nginx 업스트림 전환
            sed -i.bak "s/server ${CURRENT_COLOR}_app-nestjs-app:3000;/server ${CURRENT_COLOR}_app-nestjs-app:3000 backup;/g" nginx.conf
            sed -i.bak "s/server ${NEW_COLOR}_app-nestjs-app:3000 backup;/server ${NEW_COLOR}_app-nestjs-app:3000;/g" nginx.conf
            docker compose exec nginx nginx -t
            docker compose exec nginx nginx -s reload

            # 5. 이전 컨테이너 정리
            docker compose -p ${CURRENT_COLOR}_app down -v --remove-orphans