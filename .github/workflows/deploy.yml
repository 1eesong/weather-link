# Blue-Green DockerHub 배포
# name: Blue-Green Deployment

# on:
#   push:
#     # branches: [main]   # main 브랜치에 push될 때만 실행
#     branches: [dev]   # dev 브랜치에 push될 때만 실행

# jobs:
#   deploy:
#     needs: build-push
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Blue-Green 배포 실행
#         uses: appleboy/ssh-action@v1.0.0
#         with:
#           host: ${{ secrets.GCP_VM_IP }}
#           username: ${{ secrets.GCP_VM_USER }}
#           key: ${{ secrets.GCP_SSH_KEY }}
#           script: |
#             # 1. 현재 색상 확인
#             CURRENT_COLOR=$(docker ps --filter "name=_app-nestjs-app" --format "{{.Names}}" | grep -oE 'blue|green' | head -n1 || echo "blue")
#             NEW_COLOR=$([[ "$CURRENT_COLOR" == "blue" ]] && echo "green" || echo "blue")

#             # 2. 새 컨테이너 실행
#             docker compose -p ${NEW_COLOR}_app up -d --build --no-deps nestjs-app

#             # 3. 헬스체크 대기 (최대 60초)
#             if ! timeout 60 bash -c 'until docker inspect --format "{{.State.Health.Status}}" ${NEW_COLOR}_app-nestjs-app-1 | grep healthy; do sleep 2; done'; then
#               echo "::error::Health check failed for ${NEW_COLOR} environment"
#               docker compose -p ${NEW_COLOR}_app logs nestjs-app
#               exit 1
#             fi

#             # 4. Nginx 업스트림 전환
#             sed -i.bak "s/server ${CURRENT_COLOR}_app-nestjs-app:3000;/server ${CURRENT_COLOR}_app-nestjs-app:3000 backup;/g" nginx.conf
#             sed -i.bak "s/server ${NEW_COLOR}_app-nestjs-app:3000 backup;/server ${NEW_COLOR}_app-nestjs-app:3000;/g" nginx.conf
#             docker compose exec nginx nginx -t
#             docker compose exec nginx nginx -s reload

#             # 5. 이전 컨테이너 정리
#             docker compose -p ${CURRENT_COLOR}_app down -v --remove-orphans
